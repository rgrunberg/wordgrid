{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["DICE","randomLetter","dieLetters","i","Math","floor","random","length","split","getLetters","gridSize","shuffledDice","letters","row","j","push","pop","LetterSquare","letter","className","LetterRow","visible","map","key","LetterGrid","Countdown","time","minutes","seconds","toString","padStart","GameButton","label","onClick","extraClass","Timer","timerDone","active","resetTimer","toggleStart","classNames","SizeSelector","size","setSize","handleClick","SettingOption","ColorSelector","color","setColor","GameControls","props","lettersVisible","startNewGame","DoneModal","setShowDoneModal","useState","text","setText","onMouseEnter","onMouseLeave","App","showDoneModal","setLetters","setLettersVisible","setTime","setActive","setTimerDone","useEffect","interval","setInterval","clearInterval","app","undefined","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3fceb6a2.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport classNames from \"classnames\";\nimport \"./App.css\";\n\nconst GAME_TIME = 180;\n\nconst DICE = [\n  \"AAEEGN\",\n  \"ELRTTY\",\n  \"AOOTTW\",\n  \"ABBJOO\",\n  \"EHRTVW\",\n  \"CIMOTU\",\n  \"DISTTY\",\n  \"EIOSST\",\n  \"DELRVY\",\n  \"ACHOPS\",\n  \"HIMNQU\",\n  \"EEINSU\",\n  \"EEGHNW\",\n  \"AFFKPS\",\n  \"HLNNRZ\",\n  \"DEILRX\",\n];\n\nfunction shuffleArray(array) {\n  for (let i = array.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n}\n\nconst randomLetter = (dieLetters) => {\n  const i = Math.floor(Math.random() * dieLetters.length);\n  return dieLetters.split(\"\")[i];\n};\n\nconst getLetters = (gridSize) => {\n  const shuffledDice = [...DICE];\n\n  const letters = [];\n  for (let i = 0; i < gridSize; i++) {\n    const row = [];\n    for (let j = 0; j < gridSize; j++) {\n      row.push(randomLetter(shuffledDice.pop()));\n    }\n    letters.push(row);\n  }\n  return letters;\n};\n\nconst LetterSquare = ({ letter }) => {\n  return (\n    <div className=\"letter-square\">\n      <a>{letter}</a>\n    </div>\n  );\n};\n\nconst LetterRow = ({ letters, visible }) => {\n  return (\n    <div className=\"letter-row\">\n      {letters.map((letter, i) => (\n        <LetterSquare key={i} letter={visible ? letter : \"?\"} />\n      ))}\n    </div>\n  );\n};\n\nconst LetterGrid = ({ letters, visible }) => {\n  return (\n    <div className=\"letter-grid-container\">\n      {letters.map((row, i) => (\n        <LetterRow key={i} letters={row} visible={visible} />\n      ))}\n    </div>\n  );\n};\n\nconst Countdown = ({ time }) => {\n  const minutes = Math.floor(time / 60);\n  const seconds = time - minutes * 60;\n  return (\n    <div className=\"timer-countdown\">\n      {minutes}:{seconds.toString().padStart(2, \"0\")}\n    </div>\n  );\n};\n\nconst GameButton = ({ label, onClick, extraClass }) => {\n  return (\n    <div className={\"button\" + \" \" + extraClass} onClick={onClick}>\n      {label}\n    </div>\n  );\n};\n\nconst Timer = ({ time, timerDone, active, resetTimer, toggleStart }) => {\n  return (\n    <div\n      className={classNames({\n        \"timer-container\": true,\n        \"timer-done\": timerDone,\n      })}\n    >\n      <div className=\"timer-description\">time remaining</div>\n      <Countdown time={time} />\n\n      {timerDone ? (\n        <GameButton\n          extraClass=\"full-width\"\n          label=\"reset timer\"\n          onClick={resetTimer}\n        />\n      ) : (\n        <div className=\"timer-button-row\">\n          <GameButton\n            label={active ? \"pause\" : \"start\"}\n            onClick={toggleStart}\n          />\n          <GameButton label=\"reset\" onClick={resetTimer} />\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst SizeSelector = ({ size, setSize }) => {\n  const sizeList = [\"auto\", \"small\", \"medium\", \"large\"];\n  return (\n    <div className=\"size-selector\">\n      {sizeList.map((i) => {\n        return (\n          <SettingOption\n            key={i}\n            label={i}\n            active={size === i}\n            handleClick={() => {\n              setSize(i);\n            }}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nconst SettingOption = ({ label, active, handleClick }) => {\n  return (\n    <div\n      className={classNames({\n        \"setting-option\": true,\n        \"setting-option--active\": active,\n      })}\n      onClick={handleClick}\n    >\n      {label}\n    </div>\n  );\n};\n\nconst ColorSelector = ({ color, setColor }) => {\n  const colorList = [\"dark\", \"light\"];\n  return (\n    <div className=\"color-selector\">\n      {colorList.map((i) => {\n        return (\n          <SettingOption\n            key={i}\n            label={i}\n            active={color === i}\n            handleClick={() => {\n              setColor(i);\n            }}\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nconst GameControls = (props) => {\n  return (\n    <div className=\"game-controls\">\n      <Timer {...props} />\n      <div className=\"hint-text\">\n        {!props.lettersVisible && \"letters will reveal on start\"}\n      </div>\n      <GameButton\n        label=\"new game\"\n        extraClass=\"full-width\"\n        onClick={() => {\n          props.startNewGame();\n        }}\n      />\n    </div>\n  );\n};\n\nconst DoneModal = ({ setShowDoneModal }) => {\n  const [text, setText] = useState(\"done!\");\n  return (\n    <div\n      className=\"done-modal\"\n      onMouseEnter={() => {\n        setText(\"okay\");\n      }}\n      onMouseLeave={() => {\n        setText(\"done!\");\n      }}\n    >\n      {text}\n    </div>\n  );\n};\n\nfunction App() {\n  const timePerGame = GAME_TIME;\n\n  const [size, setSize] = useState(\"auto\");\n  const [color, setColor] = useState(\"dark\");\n  const [showDoneModal, setShowDoneModal] = useState(false);\n  const [letters, setLetters] = useState(getLetters(4));\n  const [lettersVisible, setLettersVisible] = useState(false);\n  const [time, setTime] = useState(timePerGame);\n  const [active, setActive] = useState(false);\n  const [timerDone, setTimerDone] = useState(false);\n\n  useEffect(() => {\n    let interval = null;\n    if (active) {\n      if (time <= 0) {\n        setActive(false);\n        setShowDoneModal(true);\n        return setTimerDone(true);\n      }\n      interval = setInterval(() => {\n        setTime((seconds) => seconds - 1);\n      }, 1000);\n    } else if (!active && time !== 0) {\n      clearInterval(interval);\n    }\n    return () => clearInterval(interval);\n  }, [active, time]);\n\n  const resetTimer = () => {\n    setTime(timePerGame);\n    setTimerDone(false);\n    setActive(false);\n  };\n\n  const toggleStart = () => {\n    setActive(!active);\n    if (!active) {\n      setLettersVisible(true);\n    }\n  };\n\n  const startNewGame = () => {\n    setLetters(getLetters(4));\n    setLettersVisible(false);\n    resetTimer();\n  };\n\n  return (\n    <div\n      className={classNames({\n        app: true,\n        \"size-auto\": size === \"auto\",\n        \"size-small\": size === \"small\",\n        \"size-large\": size === \"large\",\n        \"color-light\": color === \"light\",\n      })}\n      onClick={\n        showDoneModal\n          ? () => {\n              setShowDoneModal(false);\n            }\n          : undefined\n      }\n    >\n      <ColorSelector color={color} setColor={setColor} />\n      <SizeSelector size={size} setSize={setSize} />\n      <LetterGrid letters={letters} visible={lettersVisible} />\n      <GameControls\n        time={time}\n        active={active}\n        timerDone={timerDone}\n        toggleStart={toggleStart}\n        resetTimer={resetTimer}\n        startNewGame={startNewGame}\n        lettersVisible={lettersVisible}\n        setLettersVisible={setLettersVisible}\n      />\n      {showDoneModal && <DoneModal setShowDoneModal={setShowDoneModal} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}